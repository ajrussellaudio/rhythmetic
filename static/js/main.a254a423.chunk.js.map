{"version":3,"sources":["utils/beatsPerSecond.js","components/Output.jsx","panels/BeatsPerSecond.jsx","utils/periodOfBeat.js","panels/PeriodOfBeat.jsx","panels/LengthInSamples.jsx","utils/lengthInSamples.js","utils/delayTime.js","panels/DelayTime.jsx","panels/GitHubLink.jsx","panels/Transpose.jsx","utils/transpose.js","components/TempoInput.jsx","panels/TransposeToTempo.jsx","utils/transposeToTempo.js","utils/AudioRateTimer.js","panels/TapTempoModal.jsx","panels/MasterTempo.jsx","App.js","serviceWorker.js","index.js"],"names":["bpm","Output","label","value","units","className","type","readOnly","BeatsPerSecond","tempo","beatsPerSecond","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","PeriodOfBeat","periodOfBeat","sampleRates","beatDivisions","LengthInSamples","beats","sampleRate","useState","selectedSampleRate","setSelectedSampleRate","selectedBeatDivision","setSelectedBeatDivision","Fragment","onChange","event","target","map","key","parseFloat","multiplier","delayTimes","modifiers","DelayTime","selectedDelayTime","setSelectedDelayTime","selectedMultiplier","setSelectedMultiplier","delayTime","GitHubLink","href","Transposing","setTempo","semitones","setSemitones","transposedTempo","setTransposedTempo","useEffect","Math","pow","transpose","parseInt","onClick","TempoInput","handleTempoChange","newTempo","handleButtonClick","htmlFor","id","step","TransposeToTempo","original","desiredTempo","setDesiredTempo","log2","AudioRateTimer","now","context","currentTime","this","AudioContext","averageTempoOfIntervals","intervals","reduce","sum","interval","length","TapTempoModal","close","tapTempo","Subject","timer","tappedTempo","setTappedTempo","pipe","timeInterval","skip","pluck","bufferCount","tap","subscribe","tapIfSpacebarPressed","code","next","document","addEventListener","removeEventListener","aria-label","round","MasterTempo","isModalOpen","setModalOpen","SplitWithLines","children","child","name","App","Transpose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a254a423.chunk.js","sourcesContent":["export default (bpm) => bpm / 60;\n","import React from 'react';\n\nconst Output = ({ label, value, units }) => (\n    <div className=\"field is-horizontal\">\n        <div className=\"field-label is-normal\">\n            <label className=\"label\">{label}</label>\n        </div>\n        <div className=\"field-body\">\n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <input\n                        className=\"input\"\n                        type=\"text\"\n                        readOnly\n                        value={value}\n                    />\n                </div>\n                <div className=\"control\">\n                    <button className=\"button is-static\">{units}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Output;\n","import React from 'react';\nimport beatsPerSecond from '../utils/beatsPerSecond';\nimport Output from '../components/Output';\n\nconst BeatsPerSecond = ({ tempo }) => (\n    <Output\n        label=\"is equal to\"\n        units=\"Hz\"\n        value={beatsPerSecond(tempo).toLocaleString(undefined, {\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 5,\n        })}\n    />\n);\n\nexport default BeatsPerSecond;\n","import beatsPerSecond from './beatsPerSecond';\n\nexport default (tempo) => 1 / beatsPerSecond(tempo);\n","import React from 'react';\nimport periodOfBeat from '../utils/periodOfBeat';\nimport Output from '../components/Output';\n\nconst PeriodOfBeat = ({ tempo }) => (\n    <Output\n        label=\"each beat lasts\"\n        units=\"millseconds\"\n        value={(1000 * periodOfBeat(tempo)).toLocaleString(undefined, {\n            maximumFractionDigits: 1,\n        })}\n    />\n);\n\nexport default PeriodOfBeat;\n","import React, { useState } from 'react';\nimport lengthInSamples from '../utils/lengthInSamples';\nimport Output from '../components/Output';\n\nconst sampleRates = [44100, 48000];\n\nconst beatDivisions = [\n    { value: 0.25, label: '1/16 note' },\n    { value: 0.5, label: '1/8 note' },\n    { value: 1, label: '1/4 note' },\n    { value: 2, label: '1/2 note' },\n    { value: 4, label: '1 bar' },\n    { value: 8, label: '2 bars' },\n];\n\nconst LengthInSamples = ({ tempo }) => {\n    const [selectedSampleRate, setSelectedSampleRate] = useState(\n        sampleRates[0]\n    );\n\n    const [selectedBeatDivision, setSelectedBeatDivision] = useState(4);\n\n    const handleSampleRateChange = (event) => {\n        setSelectedSampleRate(event.target.value);\n    };\n\n    const handleBeatDivisionChange = (event) => {\n        setSelectedBeatDivision(parseFloat(event.target.value));\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">at a sample rate of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedSampleRate}\n                                    onChange={handleSampleRateChange}\n                                >\n                                    {sampleRates.map((sampleRate) => (\n                                        <option\n                                            value={sampleRate}\n                                            key={sampleRate}\n                                        >\n                                            {sampleRate.toLocaleString()}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">Hz</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">a length of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedBeatDivision}\n                                    onChange={handleBeatDivisionChange}\n                                >\n                                    {beatDivisions.map(({ label, value }) => (\n                                        <option value={value} key={value}>\n                                            {label} ({value} beat\n                                            {value === 1 ? '' : 's'})\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <Output\n                label=\"is\"\n                units=\"samples\"\n                value={lengthInSamples(\n                    selectedBeatDivision,\n                    tempo,\n                    selectedSampleRate\n                ).toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                })}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default LengthInSamples;\n","import periodOfBeat from './periodOfBeat';\n\nexport default (beats, bpm, sampleRate) => {\n    return periodOfBeat(bpm) * beats * sampleRate;\n};\n","import periodOfBeat from './periodOfBeat';\n\nexport default (tempo, beats, multiplier) => {\n    return periodOfBeat(tempo) * beats * multiplier * 1000;\n};\n","import React, { useState } from 'react';\nimport delayTime from '../utils/delayTime';\nimport '../scss/hideOnSmallDevice.scss';\nimport Output from '../components/Output';\n\nconst delayTimes = [\n    { beats: 4, label: '1/1' },\n    { beats: 2, label: '1/2' },\n    { beats: 1, label: '1/4' },\n    { beats: 0.5, label: '1/8' },\n    { beats: 0.25, label: '1/16' },\n    { beats: 0.125, label: '1/32' },\n    { beats: 0.0625, label: '1/64' },\n];\n\nconst modifiers = [\n    { label: 'straight', multiplier: 1 },\n    { label: 'dotted', multiplier: 1.5 },\n    { label: 'triplet', multiplier: 2 / 3 },\n];\n\nconst DelayTime = ({ tempo }) => {\n    const [selectedDelayTime, setSelectedDelayTime] = useState(4);\n    const [selectedMultiplier, setSelectedMultiplier] = useState(1);\n\n    const handleDelayTimeChange = (event) => {\n        setSelectedDelayTime(event.target.value);\n    };\n\n    const handleMultiplierChange = (event) => {\n        setSelectedMultiplier(event.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">syncs to a delay of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedDelayTime}\n                                    onChange={handleDelayTimeChange}\n                                >\n                                    {delayTimes.map(({ label, beats }) => (\n                                        <option value={beats} key={label}>\n                                            {label}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"control hide-on-small-device\">\n                            <button className=\"button is-static\">note</button>\n                        </div>\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedMultiplier}\n                                    onChange={handleMultiplierChange}\n                                >\n                                    {modifiers.map(({ label, multiplier }) => (\n                                        <option value={multiplier} key={label}>\n                                            {label}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <Output\n                label=\"when the time is set to\"\n                units=\"millseconds\"\n                value={delayTime(\n                    tempo,\n                    selectedDelayTime,\n                    selectedMultiplier\n                ).toLocaleString(undefined, {\n                    maximumFractionDigits: 1,\n                })}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default DelayTime;\n","import React from 'react';\nimport '../scss/GitHubLink.scss';\n\nconst GitHubLink = () => (\n    <div className=\"github-link\">\n        <a className=\"icon\" href=\"https://github.com/ajrussellaudio/rhythmetic\">\n            <i className=\"fab fa-github fa-lg\"></i>\n        </a>\n    </div>\n);\n\nexport default GitHubLink;\n","import React, { useState, useEffect } from 'react';\nimport transpose from '../utils/transpose';\nimport Output from '../components/Output';\n\nconst Transposing = ({ tempo, setTempo }) => {\n    const [semitones, setSemitones] = useState(0);\n    const [transposedTempo, setTransposedTempo] = useState(tempo);\n\n    const handleSemitonesChange = (event) => {\n        setSemitones(parseInt(event.target.value));\n    };\n\n    useEffect(() => {\n        setTransposedTempo(transpose(tempo, semitones));\n    }, [tempo, semitones]);\n\n    const handleButtonClick = () => {\n        setTempo(transposedTempo);\n        setSemitones(0);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">transposing by</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                className=\"input\"\n                                type=\"number\"\n                                value={semitones}\n                                onChange={handleSemitonesChange}\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">\n                                semitones\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <Output\n                label=\"makes the tempo\"\n                units=\"bpm\"\n                value={transposedTempo.toLocaleString(undefined, {\n                    maximumFractionDigits: 3,\n                })}\n            />\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\" />\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"control\">\n                        <button\n                            className=\"button is-dark\"\n                            onClick={handleButtonClick}\n                        >\n                            use this tempo\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Transposing;\n","export default (tempo, semitones) => {\n    return tempo * Math.pow(2, semitones / 12);\n};\n","import React from 'react';\nimport '../scss/hideOnSmallDevice.scss';\n\nconst TempoInput = ({ tempo, setTempo, label }) => {\n    const handleTempoChange = (newTempo) => {\n        setTempo(newTempo);\n    };\n\n    const handleInputChange = (event) => {\n        handleTempoChange(parseFloat(event.target.value));\n    };\n\n    const handleButtonClick = (value) => () => {\n        handleTempoChange(tempo + value);\n    };\n\n    return (\n        <div className=\"field is-horizontal\">\n            <div className=\"field-label is-normal\">\n                <label className=\"label\" htmlFor=\"tempo\">\n                    {label}\n                </label>\n            </div>\n            <div className=\"field-body\">\n                <div className=\"field has-addons\">\n                    <div className=\"control\">\n                        <button\n                            className=\"button\"\n                            onClick={handleButtonClick(-1)}\n                        >\n                            {'<<'}\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <button\n                            className=\"button\"\n                            onClick={handleButtonClick(-0.1)}\n                        >\n                            {'<'}\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <input\n                            className=\"input\"\n                            type=\"number\"\n                            id=\"tempo\"\n                            value={tempo.toLocaleString()}\n                            step={1}\n                            onChange={handleInputChange}\n                        />\n                    </div>\n                    <div className=\"control hide-on-small-device\">\n                        <button className=\"button is-static\">bpm</button>\n                    </div>\n                    <div className=\"control\">\n                        <button\n                            className=\"button\"\n                            onClick={handleButtonClick(0.1)}\n                        >\n                            {'>'}\n                        </button>\n                    </div>\n                    <div className=\"control\">\n                        <button\n                            className=\"button\"\n                            onClick={handleButtonClick(1)}\n                        >\n                            {'>>'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TempoInput;\n","import React, { useState } from 'react';\nimport Output from '../components/Output';\nimport TempoInput from '../components/TempoInput';\nimport transposeToTempo from '../utils/transposeToTempo';\n\nconst TransposeToTempo = ({ tempo, setTempo }) => {\n    const [desiredTempo, setDesiredTempo] = useState(tempo);\n\n    const handleButtonClick = () => {\n        setTempo(desiredTempo);\n    };\n\n    const semitones = transposeToTempo(tempo, desiredTempo).toLocaleString(\n        undefined,\n        {\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 4,\n        }\n    );\n\n    return (\n        <React.Fragment>\n            <TempoInput\n                tempo={desiredTempo}\n                setTempo={setDesiredTempo}\n                label=\"syncs to\"\n            />\n            <Output\n                label=\"when tuned\"\n                units=\"semitones\"\n                value={semitones > 0 ? '+' + semitones : semitones}\n            />\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\" />\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"control\">\n                        <button\n                            className=\"button is-dark\"\n                            onClick={handleButtonClick}\n                        >\n                            use this tempo\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TransposeToTempo;\n","export default (original, target) => {\n    return 12 * Math.log2(target / original);\n};\n","class AudioRateTimer {\n    constructor() {\n        this.context = new AudioContext();\n    }\n\n    now = () => {\n        return this.context.currentTime;\n    };\n}\n\nexport default AudioRateTimer;\n","import React, { useState, useEffect } from 'react';\nimport { Subject } from 'rxjs';\nimport {\n    timeInterval,\n    tap,\n    bufferCount,\n    pluck,\n    skip,\n    map,\n} from 'rxjs/operators';\nimport AudioRateTimer from '../utils/AudioRateTimer';\n\nimport '../scss/centered.scss';\n\nconst averageTempoOfIntervals = (intervals) => {\n    const totalInterval = intervals.reduce(\n        (sum, interval) => sum + interval,\n        0\n    );\n    const averageInterval = totalInterval / intervals.length;\n    return 60 / averageInterval;\n};\n\nconst TapTempoModal = ({ close, setTempo }) => {\n    const tapTempo = new Subject();\n    const timer = new AudioRateTimer();\n    const [tappedTempo, setTappedTempo] = useState(120.0);\n\n    useEffect(() => {\n        tapTempo\n            .pipe(\n                timeInterval(timer),\n                skip(1),\n                pluck('interval'),\n                bufferCount(3),\n                map(averageTempoOfIntervals),\n                tap(setTappedTempo)\n            )\n            .subscribe();\n    }, [tapTempo, timer]);\n\n    useEffect(() => {\n        const tapIfSpacebarPressed = ({ code }) => {\n            if (code === 'Space') {\n                tapTempo.next();\n            }\n        };\n        document.addEventListener('keydown', tapIfSpacebarPressed);\n        return () =>\n            document.removeEventListener('keydown', tapIfSpacebarPressed);\n    }, [tapTempo]);\n\n    const handleRoundClick = () => {\n        setTappedTempo(Math.round(tappedTempo));\n    };\n\n    const handleUseClick = () => {\n        setTempo(tappedTempo);\n        close();\n    };\n\n    return (\n        <div className=\"modal is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <h3 className=\"modal-card-title\">tap tempo</h3>\n                    <button\n                        className=\"delete\"\n                        aria-label=\"close\"\n                        onClick={close}\n                    ></button>\n                </header>\n                <section className=\"modal-card-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <button\n                                className=\"button is-large is-dark\"\n                                onClick={() => tapTempo.next()}\n                            >\n                                tap\n                            </button>\n                        </div>\n                        <div className=\"control\">\n                            <button\n                                className=\"button is-large is-static\"\n                                onClick={() => tapTempo.next()}\n                            >\n                                or press space\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                type=\"text\"\n                                value={tappedTempo.toLocaleString(undefined, {\n                                    minimumFractionDigits: 1,\n                                    maximumFractionDigits: 3,\n                                })}\n                                className=\"input\"\n                                readOnly\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">bpm</button>\n                        </div>\n                        <div className=\"control\">\n                            <button\n                                className=\"button is-dark\"\n                                onClick={handleRoundClick}\n                            >\n                                round\n                            </button>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <button className=\"button\" onClick={handleUseClick}>\n                        use\n                    </button>\n                    <button className=\"button\" onClick={close}>\n                        cancel\n                    </button>\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nexport default TapTempoModal;\n","import React, { useState } from 'react';\nimport TempoInput from '../components/TempoInput';\nimport TapTempoModal from './TapTempoModal';\n\nconst MasterTempo = ({ tempo, setTempo }) => {\n    const [isModalOpen, setModalOpen] = useState(false);\n\n    const openModal = () => setModalOpen(true);\n    const closeModal = () => setModalOpen(false);\n\n    return (\n        <React.Fragment>\n            <TempoInput tempo={tempo} setTempo={setTempo} label=\"a tempo of\" />\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\" />\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"control\">\n                        <button className=\"button is-dark\" onClick={openModal}>\n                            open tap tempo\n                        </button>\n                    </div>\n                </div>\n            </div>\n            {isModalOpen && (\n                <TapTempoModal close={closeModal} setTempo={setTempo} />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default MasterTempo;\n","import React, { useState } from 'react';\nimport BeatsPerSecond from './panels/BeatsPerSecond';\nimport PeriodOfBeat from './panels/PeriodOfBeat';\nimport LengthInSamples from './panels/LengthInSamples';\nimport DelayTime from './panels/DelayTime';\nimport GitHubLink from './panels/GitHubLink';\nimport Transpose from './panels/Transpose';\nimport './App.sass';\nimport TransposeToTempo from './panels/TransposeToTempo';\nimport MasterTempo from './panels/MasterTempo';\n\nconst SplitWithLines = ({ children }) => {\n    return (\n        <div className=\"container\">\n            {children.map((child) => (\n                <React.Fragment key={child.type.name}>\n                    <hr />\n                    {child}\n                </React.Fragment>\n            ))}\n        </div>\n    );\n};\n\nfunction App() {\n    const [tempo, setTempo] = useState(120);\n\n    return (\n        <React.Fragment>\n            <GitHubLink />\n            <div className=\"hero is-light\">\n                <div className=\"hero-body\">\n                    <h1 className=\"title\">rhythmetic</h1>\n                </div>\n            </div>\n            <section className=\"section\">\n                <MasterTempo tempo={tempo} setTempo={setTempo} />\n                <SplitWithLines>\n                    <BeatsPerSecond tempo={tempo} />\n                    <PeriodOfBeat tempo={tempo} />\n                    <DelayTime tempo={tempo} />\n                    <LengthInSamples tempo={tempo} />\n                    <Transpose tempo={tempo} setTempo={setTempo} />\n                    <TransposeToTempo tempo={tempo} setTempo={setTempo} />\n                </SplitWithLines>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}