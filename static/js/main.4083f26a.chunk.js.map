{"version":3,"sources":["components/TempoInput.jsx","utils/beatsPerSecond.js","components/BeatsPerSecond.jsx","utils/periodOfBeat.js","components/PeriodOfBeat.jsx","components/LengthInSamples.jsx","utils/lengthInSamples.js","utils/delayTime.js","components/DelayTime.jsx","components/GitHubLink.jsx","components/Transpose.jsx","utils/transpose.js","App.js","serviceWorker.js","index.js"],"names":["TempoInput","tempo","setTempo","handleTempoChange","newTempo","handleButtonClick","value","Fragment","className","htmlFor","onClick","type","id","toLocaleString","step","onChange","event","parseFloat","target","bpm","BeatsPerSecond","beatsPerSecond","undefined","minimumFractionDigits","maximumFractionDigits","PeriodOfBeat","periodOfBeat","sampleRates","beatDivisions","label","LengthInSamples","beats","sampleRate","useState","selectedSampleRate","setSelectedSampleRate","selectedBeatDivision","setSelectedBeatDivision","map","key","readOnly","multiplier","delayTimes","modifiers","DelayTime","selectedDelayTime","setSelectedDelayTime","selectedMultiplier","setSelectedMultiplier","delayTime","GitHubLink","class","href","Transposing","semitones","setSemitones","transposedTempo","setTransposedTempo","useEffect","Math","pow","transpose","parseInt","App","Transpose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4083f26a.chunk.js","sourcesContent":["import React from 'react';\n\nconst TempoInput = ({ tempo, setTempo }) => {\n    const handleTempoChange = (newTempo) => {\n        setTempo(newTempo);\n    };\n\n    const handleInputChange = (event) => {\n        handleTempoChange(parseFloat(event.target.value));\n    };\n\n    const handleButtonClick = (value) => () => {\n        handleTempoChange(tempo + value);\n    };\n\n    return (\n        <React.Fragment>\n            <label className=\"field-label\" htmlFor=\"tempo\">\n                a tempo of\n            </label>\n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <button className=\"button\" onClick={handleButtonClick(-1)}>\n                        {'<<'}\n                    </button>\n                </div>\n                <div className=\"control\">\n                    <button\n                        className=\"button\"\n                        onClick={handleButtonClick(-0.1)}\n                    >\n                        {'<'}\n                    </button>\n                </div>\n                <div className=\"control\">\n                    <input\n                        className=\"input\"\n                        type=\"number\"\n                        id=\"tempo\"\n                        value={tempo.toLocaleString()}\n                        step={1}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className=\"control\">\n                    <button className=\"button is-static\">bpm</button>\n                </div>\n                <div className=\"control\">\n                    <button className=\"button\" onClick={handleButtonClick(0.1)}>\n                        {'>'}\n                    </button>\n                </div>\n                <div className=\"control\">\n                    <button className=\"button\" onClick={handleButtonClick(1)}>\n                        {'>>'}\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TempoInput;\n","export default (bpm) => bpm / 60;\n","import React from 'react';\nimport beatsPerSecond from '../utils/beatsPerSecond';\n\nconst BeatsPerSecond = ({ tempo }) => (\n    <div className=\"box\">\n        is equal to{' '}\n        <strong>\n            {beatsPerSecond(tempo).toLocaleString(undefined, {\n                minimumFractionDigits: 1,\n                maximumFractionDigits: 5,\n            })}\n        </strong>{' '}\n        beats per second\n    </div>\n);\n\nexport default BeatsPerSecond;\n","import beatsPerSecond from './beatsPerSecond';\n\nexport default (tempo) => 1 / beatsPerSecond(tempo);\n","import React from 'react';\nimport periodOfBeat from '../utils/periodOfBeat';\n\nconst PeriodOfBeat = ({ tempo }) => (\n    <div className=\"box\">\n        each beat lasts{' '}\n        <strong>\n            {(1000 * periodOfBeat(tempo)).toLocaleString(undefined, {\n                maximumFractionDigits: 1,\n            })}\n        </strong>{' '}\n        milliseconds\n    </div>\n);\n\nexport default PeriodOfBeat;\n","import React, { useState } from 'react';\nimport lengthInSamples from '../utils/lengthInSamples';\n\nconst sampleRates = [44100, 48000];\n\nconst beatDivisions = [\n    { value: 0.25, label: '1/16 note' },\n    { value: 0.5, label: '1/8 note' },\n    { value: 1, label: '1/4 note' },\n    { value: 2, label: '1/2 note' },\n    { value: 4, label: '1 bar' },\n    { value: 8, label: '2 bars' },\n];\n\nconst LengthInSamples = ({ tempo }) => {\n    const [selectedSampleRate, setSelectedSampleRate] = useState(\n        sampleRates[0]\n    );\n\n    const [selectedBeatDivision, setSelectedBeatDivision] = useState(4);\n\n    const handleSampleRateChange = (event) => {\n        setSelectedSampleRate(event.target.value);\n    };\n\n    const handleBeatDivisionChange = (event) => {\n        setSelectedBeatDivision(parseFloat(event.target.value));\n    };\n\n    return (\n        <div className=\"box\">\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">at a sample rate of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedSampleRate}\n                                    onChange={handleSampleRateChange}\n                                >\n                                    {sampleRates.map((sampleRate) => (\n                                        <option\n                                            value={sampleRate}\n                                            key={sampleRate}\n                                        >\n                                            {sampleRate.toLocaleString()}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">Hz</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">a length of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedBeatDivision}\n                                    onChange={handleBeatDivisionChange}\n                                >\n                                    {beatDivisions.map(({ label, value }) => (\n                                        <option value={value} key={value}>\n                                            {label} ({value} beat\n                                            {value === 1 ? '' : 's'})\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">is</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                readOnly\n                                value={lengthInSamples(\n                                    selectedBeatDivision,\n                                    tempo,\n                                    selectedSampleRate\n                                ).toLocaleString(undefined, {\n                                    maximumFractionDigits: 0,\n                                })}\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">\n                                samples\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LengthInSamples;\n","import periodOfBeat from './periodOfBeat';\n\nexport default (beats, bpm, sampleRate) => {\n    return periodOfBeat(bpm) * beats * sampleRate;\n};\n","import periodOfBeat from './periodOfBeat';\n\nexport default (tempo, beats, multiplier) => {\n    return periodOfBeat(tempo) * beats * multiplier * 1000;\n};\n","import React, { useState } from 'react';\nimport delayTime from '../utils/delayTime';\n\nconst delayTimes = [\n    { beats: 4, label: '1/1' },\n    { beats: 2, label: '1/2' },\n    { beats: 1, label: '1/4' },\n    { beats: 0.5, label: '1/8' },\n    { beats: 0.25, label: '1/16' },\n    { beats: 0.125, label: '1/32' },\n    { beats: 0.0625, label: '1/64' },\n];\n\nconst modifiers = [\n    { label: 'straight', multiplier: 1 },\n    { label: 'dotted', multiplier: 1.5 },\n    { label: 'triplet', multiplier: 2 / 3 },\n];\n\nconst DelayTime = ({ tempo }) => {\n    const [selectedDelayTime, setSelectedDelayTime] = useState(4);\n    const [selectedMultiplier, setSelectedMultiplier] = useState(1);\n\n    const handleDelayTimeChange = (event) => {\n        setSelectedDelayTime(event.target.value);\n    };\n\n    const handleMultiplierChange = (event) => {\n        setSelectedMultiplier(event.target.value);\n    };\n\n    return (\n        <div className=\"box\">\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">syncs to a delay of</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedDelayTime}\n                                    onChange={handleDelayTimeChange}\n                                >\n                                    {delayTimes.map(({ label, beats }) => (\n                                        <option value={beats} key={label}>\n                                            {label}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">note</button>\n                        </div>\n                        <div className=\"control\">\n                            <div className=\"select\">\n                                <select\n                                    value={selectedMultiplier}\n                                    onChange={handleMultiplierChange}\n                                >\n                                    {modifiers.map(({ label, multiplier }) => (\n                                        <option value={multiplier} key={label}>\n                                            {label}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">when the time is set to</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                className=\"input\"\n                                type=\"text\"\n                                readOnly\n                                value={delayTime(\n                                    tempo,\n                                    selectedDelayTime,\n                                    selectedMultiplier\n                                ).toLocaleString(undefined, {\n                                    maximumFractionDigits: 1,\n                                })}\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">\n                                milliseconds\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DelayTime;\n","import React from 'react';\nimport './GitHubLink.scss';\n\nconst GitHubLink = () => (\n    <div className=\"github-link\">\n        <a class=\"icon\" href=\"https://github.com/ajrussellaudio/rhythmetic\">\n            <i class=\"fab fa-github fa-lg\"></i>\n        </a>\n    </div>\n);\n\nexport default GitHubLink;\n","import React, { useState, useEffect } from 'react';\nimport transpose from '../utils/transpose';\n\nconst Transposing = ({ tempo, setTempo }) => {\n    const [semitones, setSemitones] = useState(0);\n    const [transposedTempo, setTransposedTempo] = useState(tempo);\n\n    const handleSemitonesChange = (event) => {\n        setSemitones(parseInt(event.target.value));\n    };\n\n    useEffect(() => {\n        setTransposedTempo(transpose(tempo, semitones));\n    }, [tempo, semitones]);\n\n    const handleButtonClick = () => {\n        setTempo(transposedTempo);\n        setSemitones(0);\n    };\n\n    return (\n        <div className=\"box\">\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">transposing by</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                class=\"input\"\n                                type=\"number\"\n                                value={semitones}\n                                onChange={handleSemitonesChange}\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">\n                                semitones\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"field is-horizontal\">\n                <div className=\"field-label is-normal\">\n                    <label className=\"label\">makes the tempo</label>\n                </div>\n                <div className=\"field-body\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control\">\n                            <input\n                                class=\"input\"\n                                type=\"text\"\n                                value={transposedTempo.toLocaleString(\n                                    undefined,\n                                    {\n                                        maximumFractionDigits: 3,\n                                    }\n                                )}\n                                readOnly\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-static\">bpm</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"control\">\n                <button className=\"button is-dark\" onClick={handleButtonClick}>\n                    use this tempo\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Transposing;\n","export default (tempo, semitones) => {\n    return tempo * Math.pow(2, semitones / 12);\n};\n","import React, { useState } from 'react';\nimport TempoInput from './components/TempoInput';\nimport BeatsPerSecond from './components/BeatsPerSecond';\nimport PeriodOfBeat from './components/PeriodOfBeat';\nimport LengthInSamples from './components/LengthInSamples';\nimport DelayTime from './components/DelayTime';\nimport GitHubLink from './components/GitHubLink';\nimport Transpose from './components/Transpose';\nimport './App.sass';\n\nfunction App() {\n    const [tempo, setTempo] = useState(120);\n\n    return (\n        <React.Fragment>\n            <GitHubLink />\n            <div className=\"hero is-light\">\n                <div className=\"hero-body\">\n                    <h1 className=\"title\">rhythmetic</h1>\n                </div>\n            </div>\n            <section className=\"section\">\n                <div className=\"container\">\n                    <TempoInput tempo={tempo} setTempo={setTempo} />\n                    <BeatsPerSecond tempo={tempo} />\n                    <PeriodOfBeat tempo={tempo} />\n                    <DelayTime tempo={tempo} />\n                    <LengthInSamples tempo={tempo} />\n                    <Transpose tempo={tempo} setTempo={setTempo} />\n                </div>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}